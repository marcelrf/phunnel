#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Usage:
    phunnel (-h | --help)
    phunnel [--dry-run] [--board=<board>]

Options:
    -h --help         Show this help message and exit.
    --dry-run         Specified modifications are not really applied.
    --board=<board>   Grooms the specified board only.
"""

# PHUNNEL MANIFESTO:
# 1 - All backlog tasks need to be in a category column (active, inactive, radar, blocked, deprioritized).
# 2 - Backlog tasks in active columns need to have a priority.
# 3 - All kanban tasks need to have points.
# 4 - All kanban tasks except nextUp and parentTasks need to have an owner.
# 5 - There can not be stale* tasks in kanban.
# 6 - There can not be stale** tasks in backlog.
# (*) When are kanban tasks stale?
#     - Tasks in the done column can not be stale.
#     - For the rest of columns, see config.
# (**) When are backlog tasks stale?
#     - Tasks outside active columns can not be stale.
#     - Active-column tasks that are also in kanban can not be stale.
#     - Backlog-only active-column tasks that need triage are always considered stale.
#     - For backlog-only active-column tasks with other priorities, see config.
# Extra
# - If a backlog-only task is triaged to high or unbreak, offer to move it to kanban.
# - If a kanban next-up task is pointed, offer to assign a user.
# - If a kanban next-up task is assigned a user, offer to move to a kanban column.


from datetime import datetime, timedelta
from docopt import docopt
from phabricator import Phabricator
import json
import sys
import urllib2
import yaml


# Methods for reading, parsing and completing configuration.

def read_config(phab):
    with open("config.yaml", 'r') as config_file:
        config = yaml.safe_load(config_file)
    backlog_conditions = config['backlog']['stallConditions']
    kanban_conditions = config['kanban']['stallConditions']
    for priority, condition in backlog_conditions.items():
        backlog_conditions[priority] = parse_stall_condition(condition)
    for column, condition in kanban_conditions.items():
        kanban_conditions[column] = parse_stall_condition(condition)
    config['categoryColumns'] = get_category_columns(config['backlog'])
    config['columnNames'] = get_column_names(phab, config)
    config['priorities'] = get_priorities(phab)
    config['users'] = get_user_names(phab, config)
    return config

def parse_stall_condition(condition):
    parsed = {}
    parts = filter(lambda x: x != '', condition.strip().split(' '))
    count = int(parts[0])
    unit = parts[1]
    parsed['count'] = count
    parsed['unit'] = unit
    parsed['criteria'] = parts[2]
    if unit == 'days': days = count
    elif unit == 'weeks': days = count * 7
    elif unit == 'months': days = count * 30
    elif unit == 'quarters': days = count * 90
    elif unit == 'years': days = count * 365
    parsed['timedelta'] = timedelta(days=days)
    return parsed

def get_category_columns(backlog):
    return backlog['active'] + backlog['inactive'] + [
        backlog['blocked'],
        backlog['radar'],
        backlog['deprioritized']
    ]

def get_priorities(phab):
    priority_list = phab.maniphest.priority.search()['data']
    return {
        p['value']: p
        for p in priority_list
    }

def get_column_names(phab, config):
    column_info = phab.project.column.search(constraints={
        'projects': [
            config['backlog']['board'],
            config['kanban']['board']
        ]
    })
    return {
        c['phid']: c['fields']['name']
        for c in column_info['data']
    }

def get_user_names(phab, config):
    user_info = phab.user.search(constraints={'phids': config['users']})
    return {
        u['phid']: u['fields']['username']
        for u in user_info['data']
    }


# Methods to get tasks and decorate them with useful information.

def get_tasks(phab, config, now, board):
    # Get project tasks.
    backlog_tasks = get_board_tasks(phab, config, config['backlog']['board'])
    backlog_ids = set([t['id'] for t in backlog_tasks])
    kanban_tasks = get_board_tasks(phab, config, config['kanban']['board'])
    kanban_ids = set([t['id'] for t in kanban_tasks])
    # Merge tasks and assign boards.
    tasks = []
    for task in backlog_tasks:
        task['boards'] = set(['backlog'])
        if task['id'] in kanban_ids:
            task['boards'].add('kanban')
        tasks.append(task)
    for task in kanban_tasks:
        if task['id'] not in backlog_ids:
            task['boards'] = set(['kanban'])
            tasks.append(task)
    # Append task transactions.
    task_ids = [int(t['id']) for t in tasks]
    transaction_sets = phab.maniphest.gettasktransactions(ids=task_ids).values()
    transaction_sets.sort(key=lambda x: int(x[0]['taskID']))
    tasks.sort(key=lambda x: x['id'])
    for i in range(len(tasks)):
        tasks[i]['transactions'] = sorted(
            transaction_sets[i],
            key=lambda x: -int(x['dateCreated'])
        )
    # Decorate tasks with convenient information.
    for task in tasks:
        task['backlogColumn'] = get_task_column(task, config['backlog']['board'], now, config)
        task['kanbanColumn'] = get_task_column(task, config['kanban']['board'], now, config)
        task['priority'] = get_task_priority(task['transactions'], now)
        task['order'] = get_task_order(task, config)
    # Filter and sort.
    tasks = filter(lambda t: (
        (board is None or (
            board == 'backlog' and 'kanban' not in t['boards'] or
            board == 'kanban' and 'kanban' in t['boards']
        )) and t['order'] is not None
    ), tasks)
    tasks.sort(key=lambda x: x['order'])
    return tasks

def get_board_tasks(phab, config, board):
    results = phab.maniphest.search(constraints={
        'projects': [board],
        'statuses': ["open"]
    })
    tasks = results['data']
    while results['cursor']['after'] is not None:
        results = phab.maniphest.search(
            constraints={
                'projects': [board],
                'statuses': ["open"]
            },
            after=results['cursor']['after']
        )
        tasks.extend(results['data'])
    return tasks

def get_task_column(task, board, now, config):
    for transaction in task['transactions']:
        if transaction['transactionType'] == 'core:columns':
            column_info = transaction['newValue'][0]
            if column_info['boardPHID'] == board:
                column = column_info['columnPHID']
                timestamp_assigned = transaction['dateCreated']
                date_assigned = datetime.fromtimestamp(int(timestamp_assigned))
                timedelta_since_assigned = now - date_assigned
                return [column, timedelta_since_assigned]
    timestamp_created = task['fields']['dateCreated']
    date_created = datetime.fromtimestamp(int(timestamp_created))
    timedelta_since_created = now - date_created
    if 'kanban' in task['boards']:
        return [config['kanban']['nextUp'], timedelta_since_created]
    else:
        return [config['backlog']['incoming'][0], timedelta_since_created]

def get_task_priority(transactions, now):
    priority = 90
    timestamp_assigned = transactions[-1]['dateCreated']
    for transaction in transactions:
        if transaction['transactionType'] == 'priority':
            priority = int(transaction['newValue'])
            timestamp_assigned = transaction['dateCreated']
            break
    date_assigned = datetime.fromtimestamp(int(timestamp_assigned))
    timedelta_since_assigned = now - date_assigned
    return [priority, timedelta_since_assigned]

def get_task_order(task, config):
    order = 0
    if 'kanban' in task['boards']:
        board = config['kanban']
        column, timedelta = task['kanbanColumn']
        if column == board['readyToDeploy']: pass
        elif column == board['inCodeReview']: order += 1000
        elif column == board['inProgress']: order += 2000
        elif column == board['paused']: order += 3000
        elif column == board['parentTasks']: order += 4000
        elif column == board['nextUp']: order += 5000
        else: return None
        order -= timedelta.total_seconds() / 100000
    else:
        order += 10000
        board = config['backlog']
        column, timedelta = task['backlogColumn']
        if column == board['blocked']: pass
        elif column in board['active']: order += 1000
        elif column in board['incoming']: order += 2000
        else: return None
        order -= task['priority'][0]
    return order


# Methods to apply the maniphesto to a given task.

def task_needs_category(task, config, now):
    return (
        'backlog' in task['boards'] and
        task['backlogColumn'][0] not in config['categoryColumns']
    )

def assign_category(task, config, phab):
    print('NEEDS CATEGORY')
    for i in range(len(config['categoryColumns'])):
        column = config['categoryColumns'][i]
        column_name = config['columnNames'][column]
        print('%s[%d] %s' % (' ' if i < 9 else '', i + 1, column_name))
    print(' [s] Skip')
    while True:
        code = raw_input()
        try:
            index = int(code) - 1
            category = config['categoryColumns'][index]
        except ValueError, IndexError:
            if code == 'r': category = config['backlog']['radar']
            elif code == 'b': category = config['backlog']['blocked']
            elif code == 'd': category = config['backlog']['deprioritized']
            elif code == 's':
                print('-- Skipped.')
                return None
            else:
                continue
        if 'dryRun' not in config:
            phab.maniphest.edit(transactions=[{
                'type': 'column',
                'value': [category]
            }], objectIdentifier=task['id'])
        task['backlogColumn'] = [category, timedelta(days=0)]
        task['boards'].add('backlog')
        print('-- Task assigned to %s.' % config['columnNames'][category])
        return task

def task_needs_priority(task, config, now):
    return (
        'kanban' not in task['boards'] and
        task['backlogColumn'][0] in config['backlog']['active'] and
        task['priority'][0] is 90
    )

def assign_priority(task, config, phab, text='NEEDS TRIAGE'):
    print(text)
    abbreviations = {100: 'u', 90: 't', 80: 'h', 50: 'n', 25: 'l', 10: 'v'}
    for priority, info in reversed(sorted(config['priorities'].items())):
        if priority == 90: continue
        print(' [%s] %s' % (abbreviations[priority], info['name']))
    print(' [s] Skip')
    while True:
        code = raw_input()
        if code == 'u': new_priority = 100
        elif code == 'h': new_priority = 80
        elif code == 'n': new_priority = 50
        elif code == 'l': new_priority = 25
        elif code == 'v': new_priority = 10
        elif code == 's':
            print('-- Skipped.')
            return None
        else: continue
        new_priority_keyword = config['priorities'][new_priority]['keywords'][0]
        if 'dryRun' not in config:
            if task['priority'][0] == new_priority:
                phab.maniphest.edit(transactions=[{
                    'type': 'priority',
                    'value': 'triage'
                }], objectIdentifier=task['id'])
            phab.maniphest.edit(transactions=[{
                'type': 'priority',
                'value': new_priority_keyword
            }], objectIdentifier=task['id'])
        task['priority'] = [new_priority, timedelta(days=0)]
        print('-- Task priority set to %s.' % new_priority_keyword)
        # if (
        #     'kanban' not in task['boards'] and
        #     new_priority >= 80 and
        #     'justMovedFromKanban' not in task
        # ):
        #     print('MOVE TO KANBAN? (y/n)')
        #     while True:
        #         code = raw_input()
        #         if code == 'y':
        #             next_up = config['kanban']['nextUp']
        #             if 'dryRun' not in config:
        #                 phab.maniphest.edit(transactions=[{
        #                     'type': 'column',
        #                     'value': [next_up]
        #                 }], objectIdentifier=task['id'])
        #             task['boards'].add('kanban')
        #             task['kanbanColumn'] = [next_up, timedelta(days=0)]
        #             print('-- Task moved to kanban.')
        #             return task
        #         elif code == 'n':
        #             print('-- Never mind.')
        #             return task
        #         else: continue
        return task

def task_needs_points(task, config, now):
    return (
        'kanban' in task['boards'] and
        task['fields']['points'] is None
    )

def assign_points(task, config, phab):
    print('NEEDS POINTS')
    print('(positive integer or [s] to skip)')
    while True:
        code = raw_input()
        try:
            points = int(code)
            if points < 0:
                continue
        except ValueError:
            if code == 's':
                print('-- Skipped.')
                return None
            else:
                continue
        if 'dryRun' not in config:
            phab.maniphest.edit(transactions=[{
                'type': 'points',
                'value': points
            }], objectIdentifier=task['id'])
        task['fields']['points'] = points
        print('-- Task points set to %d.' % points)
        # if task['kanbanColumn'][0] == config['kanban']['nextUp']:
        #     return assign_owner(task, config, phab, 'ASSIGN USER?')
        return task

def task_needs_owner(task, config, now):
    return (
        'kanban' in task['boards'] and
        task['kanbanColumn'][0] not in [
            config['kanban']['parentTasks'],
            config['kanban']['nextUp']
        ] and
        task['fields']['ownerPHID'] is None
    )

def assign_owner(task, config, phab, text='NEEDS OWNER'):
    print(text)
    user_ids = config['users'].keys()
    for i in range(len(user_ids)):
        user_id = user_ids[i]
        user_name = config['users'][user_id]
        print('%s[%d] %s' % (' ' if i < 9 else '', i + 1, user_name))
    print(' [s] Skip')
    while True:
        code = raw_input()
        try:
            index = int(code) - 1
            owner = user_ids[index]
        except ValueError, IndexError:
            if code == 's':
                print('-- Skipped.')
                return None
            else:
                continue
        if 'dryRun' not in config:
            phab.maniphest.edit(transactions=[{
                'type': 'owner',
                'value': owner
            }], objectIdentifier=task['id'])
        task['fields']['ownerPHID'] = owner
        print('-- Task assigned to user %s.' % config['users'][owner])
        # if task['kanbanColumn'][0] == config['kanban']['nextUp']:
        #     return refresh_kanban_task(task, config, phab, 'MOVE TO COLUMN?', False)
        return task

def task_in_kanban_is_stale(task, config, now):
    if 'kanban' not in task['boards']: return False
    task_column = task['kanbanColumn'][0]
    active_columns = ['readyToDeploy', 'inCodeReview',
        'inProgress', 'paused', 'parentTasks', 'nextUp']
    kanban_config = config['kanban']
    condition = None
    for active_column in active_columns:
        if task_column == kanban_config[active_column]:
            condition = kanban_config['stallConditions'][active_column]
            break
    if condition is None: return False
    task['condition'] = condition
    if condition['criteria'] == 'static':
        task_timedelta = task['kanbanColumn'][1]
    elif condition['criteria'] == 'inactive':
        timestamp_modified = task['fields']['dateModified']
        date_modified = datetime.fromtimestamp(int(timestamp_modified))
        task_timedelta = now - date_modified
    return task_timedelta > condition['timedelta']

def refresh_kanban_task(task, config, phab, text=None, show_backlog=True):
    if text is None:
        text = '%s FOR MORE THAN %d %s' % (
            task['condition']['criteria'].upper(),
            task['condition']['count'],
            task['condition']['unit'].upper()
        )
    print(text)
    kanban = config['kanban']
    names = config['columnNames']
    print(' [1] %s' % names[kanban['parentTasks']])
    print(' [2] %s' % names[kanban['nextUp']])
    print(' [3] %s' % names[kanban['paused']])
    print(' [4] %s' % names[kanban['inProgress']])
    print(' [5] %s' % names[kanban['inCodeReview']] )
    print(' [6] %s' % names[kanban['readyToDeploy']])
    print(' [7] %s' % names[kanban['done']])
    if show_backlog: print(' [8] Backlog' )
    print(' [s] Skip')
    while True:
        code = raw_input()
        if code == '1': column = kanban['parentTasks']
        elif code == '2': column = kanban['nextUp']
        elif code == '3': column = kanban['paused']
        elif code == '4': column = kanban['inProgress']
        elif code == '5': column = kanban['inCodeReview']
        elif code == '6': column = kanban['readyToDeploy']
        elif code == '7': column = kanban['done']
        elif code == '8' and show_backlog:
            incoming = config['backlog']['incoming'][0]
            if 'dryRun' not in config:
                phab.maniphest.edit(
                    transactions=[
                        {
                            'type': 'projects.remove',
                            'value': [kanban['board']]
                        }, {
                            'type': 'column',
                            'value': [incoming]
                        }
                    ],
                    objectIdentifier=task['id']
                )
            task['boards'] = set(['backlog'])
            task['kanbanColumn'] = [None, None]
            task['backlogColumn'] = [incoming, timedelta(days=0)]
            task['justMovedFromKanban'] = True
            print('-- Task moved to backlog.')
            return task
        elif code == 's':
            print('-- Skipped.')
            return None
        else:
            continue
        if 'dryRun' not in config:
            phab.maniphest.edit(transactions=[{
                'type': 'column',
                'value': [column]
            }], objectIdentifier=task['id'])
        task['kanbanColumn'] = [column, timedelta(days=0)]
        print('-- Task moved to %s.' % names[column])
        return task

def task_in_backlog_is_stale(task, config, now):
    if 'kanban' in task['boards']: return False
    if task['backlogColumn'][0] not in config['backlog']['active']: return False
    task_priority = task['priority'][0]
    conditions = config['backlog']['stallConditions']
    if task_priority == 100: condition = conditions['unbreak']
    elif task_priority == 80: condition = conditions['high']
    elif task_priority == 50: condition = conditions['normal']
    elif task_priority == 25: condition = conditions['low']
    elif task_priority == 10: condition = conditions['lowest']
    if condition is None: return False
    task['condition'] = condition
    return task['priority'][1] > condition['timedelta']


def refresh_backlog_task(task, config, phab):
    text = 'MARKED %s MORE THAN %d %s AGO' % (
        config['priorities'][task['priority'][0]]['name'].upper(),
        task['condition']['count'],
        task['condition']['unit'].upper()
    )
    return assign_priority(task, config, phab, text)


# Main methods.

MANIFESTO = [
    [task_needs_category, assign_category],
    [task_needs_priority, assign_priority],
    [task_needs_points, assign_points],
    [task_needs_owner, assign_owner],
    [task_in_kanban_is_stale, refresh_kanban_task],
    [task_in_backlog_is_stale, refresh_backlog_task]
]

def task_needs_fix(task, config, now):
    for needs_fix, fix in MANIFESTO:
        if needs_fix(task, config, now):
            return fix
    return None

def print_task_info(task, config):
    print('')
    print(task['fields']['name'])
    print('%sT%d' % (config['phabricatorUrl'], task['id']))
    if 'kanban' in task['boards']:
        print('<Kanban :: %s>' % config['columnNames'][task['kanbanColumn'][0]])
    else:
        print('<Backlog :: %s>' % config['columnNames'][task['backlogColumn'][0]])


def main():

    # Offer something to read while waiting.
    joke_api_url = 'http://api.icndb.com/jokes/random?limitTo=[nerdy]&escape=javascript'
    joke = json.loads(urllib2.urlopen(joke_api_url).read())['value']['joke']
    print('-- Gathering data from Phabricator...')
    print('In the meantime, you can read this important message from www.icndb.com:')
    print('"%s"' % joke)

    # Initializations.
    arguments = docopt(__doc__)
    now = datetime.now()
    phab = Phabricator(timeout=300)
    phab.update_interfaces()
    config = read_config(phab)
    if arguments['--dry-run']: config['dryRun'] = True
    tasks = get_tasks(phab, config, now, arguments['--board'])

    # Apply maniphesto.
    for task in tasks:
        fix = task_needs_fix(task, config, now)
        if fix is not None:
            print_task_info(task, config)
        while fix is not None:
            task = fix(task, config, phab)
            if task is None: break
            fix = task_needs_fix(task, config, now)

    print('\nDone!\n')


if __name__ == '__main__':
    main()
